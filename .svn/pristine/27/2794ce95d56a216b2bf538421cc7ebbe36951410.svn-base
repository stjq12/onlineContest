<template>
  <div class="app-container">
    <!-- 表格顶部功能框 -->
    <div class="filter-container">
      <!-- 功能框分为三部分handleFilter -->
      <div class="flex-box">
        <div>
          <el-button v-if="operability" class="filter-item" type="primary" icon="el-icon-edit" @click="handleCreate">
            添加
          </el-button>
        </div>
        <div />
        <div />
      </div>
    </div>
    <!-- 表格内容 -->
    <el-table
      :key="tableKey"
      v-loading="listLoading"
      :data="list"
      fit
      highlight-current-row
      style="width: 100%;"
    >
      <el-table-column label="ID" width="55px" align="center" type="index" />
      <el-table-column label="模板名称" min-width="460px" align="center">
        <template slot-scope="{row}">
          <span class="link-type"><a :href="url + row.path">{{ row.file_name }}</a></span>
        </template>
      </el-table-column>
      <el-table-column v-if="operability" label="操作" align="center" width="180" class-name="small-padding fixed-width">
        <template slot-scope="{row,$index}">
          <el-button type="primary" size="mini" @click="handleUpdate(row)">
            编辑
          </el-button>
          <el-popconfirm
            title="确定删除该数据吗？"
            @onConfirm="handleDelete(row,$index)"
          >
            <el-button slot="reference" size="mini" type="danger">删除</el-button>
          </el-popconfirm>
        </template>
      </el-table-column>
    </el-table>
    <!-- 分页 -->
    <pagination v-show="total>0" class="center" :total="total" :page.sync="listQuery.page" :limit.sync="listQuery.limit" @pagination="getList" />
    <!-- 编辑与新增弹框 -->
    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible" @close="RemoveFileList">
      <el-form ref="dataForm" :rules="rules" :model="temp" label-position="left" label-width="150px" style="width: 90%; margin-left:50px;">
        <el-form-item label="奖状模板" prop="priceModel">
          <el-upload
            action="#"
            accept=".pdf"
            :multiple="true"
            :auto-upload="false"
            :on-remove="handleRemove"
            :on-change="fileChange"
            :file-list="fileList"
          >
            <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
          </el-upload>
        </el-form-item>
        <el-form-item label="自定义奖状模板名称" prop="priceName" style="width: 80%;">
          <el-input v-model="temp.file_name" />
        </el-form-item>
        <el-form-item label="奖项等级" prop="priceName" style="width: 80%;">
          <el-select v-model="temp.level" placeholder="请选择">
            <el-option
              v-for="item in level"
              :key="item.value"
              :label="item.label"
              :value="item.value"
            />
          </el-select>
        </el-form-item>
        <el-form-item label="奖状对应届数" prop="priceName" style="width: 80%;">
          <el-input v-model="temp.number" />
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible = false">
          取消
        </el-button>
        <el-button type="primary" @click="dialogStatus==='create'?createData():updateData()">
          确定
        </el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import { mapGetters } from 'vuex'
import { search } from '@/api/Article/question'
import { getPrizeModelMes, getPriceName, addPrizeModel, deletePrizeModel, updatePrizeModel } from '@/api/Article/rewardtemplate'
import waves from '@/directive/waves'
import Pagination from '@/components/Pagination'

export default {
  name: 'Question',
  components: { Pagination },
  directives: { waves },
  data() {
    return {
      tableKey: 0,
      list: null,
      // 总共内容数
      total: 0,
      listLoading: true, // 列表加载状态
      listQuery: {
        page: 1,
        limit: 20,
        title: undefined,
        sort: '+id'
      },
      // 弹框内容
      temp: {
        id: undefined,
        priceModel: [],
        time: new Date(),
        value: null,
        level: null
      },
      // 弹出框是否显示
      dialogFormVisible: false,
      dialogStatus: '',
      textMap: {
        update: '编辑',
        create: '新增'
      },
      // 弹框规则
      rules: {
        priceName: [{ message: '请输入名称', trigger: 'blur' }]
      },
      // 下载excel
      downloadLoading: false,
      // 搜索内容
      searchKey: '',
      searchData: {
        pageNum: 1,
        pageSize: 20,
        qcontent: ''
      },
      // 奖状名
      options: [],
      fileList: [],
      // 奖项等级
      level: [{
        value: 0,
        label: '院长特别奖'
      }, {
        value: 1,
        label: '一等奖'
      }, {
        value: 2,
        label: '二等奖'
      }, {
        value: 3,
        label: '三等奖'
      }, {
        value: 4,
        label: '优胜奖'
      }, {
        value: 5,
        label: '鼓励奖'
      }],
      url: 'https://sd.bnuz.edu.cn/'
    }
  },
  computed: {
    ...mapGetters([
      'operability'
    ])
  },
  created() {
    this.getList()
  },
  methods: {
    // 网络请求获取表格数据
    getList() {
      getPrizeModelMes().then(response => {
        this.list = response.obj.prizeList
        this.total = response.obj.pageTotal
        this.listLoading = false
      })
      getPriceName().then(response => {
        this.options = response.obj
      })
    },
    // 搜索
    handleFilter() {
      this.searchData.qcontent = this.searchKey
      search(this.searchData).then(response => {
        if (response.obj.pageTotal === 0) {
          this.$notify({
            title: '对不起！',
            message: '没有您想要的数据',
            type: 'warning',
            duration: 2000
          })
          return
        } else {
          this.listQuery.page = 1
          this.list = response.obj.questionList
          this.total = response.obj.pageTotal
          this.listLoading = false
        }
      })
    },
    // 新增弹框清空内容
    resetTemp() {
      this.temp = {
        id: undefined,
        priceModel: [],
        time: new Date(),
        file_name: '',
        value: null,
        level: null
      }
      this.fileList = []
    },
    // 弹出新增框
    handleCreate() {
      this.resetTemp()
      this.dialogStatus = 'create'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    // 新增
    createData() {
      if (!this.fileList.length) {
        this.$notify({
          title: '对不起！',
          message: '请选择奖状模板pdf文件',
          type: 'warning',
          duration: 2000
        })
        return
      }
      this.$refs['dataForm'].validate((valid) => {
        if (valid) {
          this.total = this.total + 1
          this.temp.id = this.total
          const formData = new FormData()
          for (const item of this.fileList) {
            formData.append('prizeModel', item)
          }
          formData.append('file_name', this.temp.file_name)
          formData.append('level', this.temp.level)
          formData.append('number', this.temp.number)
          addPrizeModel(formData).then(() => {
            this.list.unshift(this.temp)
            this.dialogFormVisible = false
            this.$notify({
              title: '成功',
              message: '添加成功',
              type: 'success',
              duration: 2000
            })
            this.getList()
          })
        }
      })
    },
    // 弹出编辑框
    handleUpdate(row) {
      this.resetTemp()
      this.temp = Object.assign({}, row)
      this.temp.priceModel = []
      if (this.temp.path) {
        // 转化成file对象
        const obj1 = new File([this.temp.path], this.temp.file_name)
        this.fileList.push(obj1)
      }
      console.log(this.fileList)
      this.dialogStatus = 'update'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    // 编辑
    updateData() {
      if (!this.fileList.length) {
        this.$notify({
          title: '对不起！',
          message: '请选择奖状模板pdf文件',
          type: 'warning',
          duration: 2000
        })
        return
      }
      this.$refs['dataForm'].validate((valid) => {
        if (valid) {
          const tempEventData = new FormData()
          for (const item of this.fileList) {
            tempEventData.append('prizeModel', item)
          }
          tempEventData.append('pid', this.temp.id)
          tempEventData.append('file_name', this.temp.file_name)
          tempEventData.append('level', this.temp.level)
          tempEventData.append('number', this.temp.number)
          updatePrizeModel(tempEventData).then(() => {
            const index = this.list.findIndex(v => v.id === this.temp.id)
            this.list.splice(index, 1, this.temp)
            this.dialogFormVisible = false
            this.$notify({
              title: '成功',
              message: '修改成功',
              type: 'success',
              duration: 2000
            })
          })
        }
      })
    },
    // 删除操作
    handleDelete(row, index) {
      deletePrizeModel(row.id).then(() => {
        this.$notify({
          title: '成功',
          message: '成功删除',
          type: 'success',
          duration: 2000
        })
        this.list.splice(index, 1)
      })
    },
    // Excel格式化函数
    formatJson(filterVal) {
      return this.list.map(v => filterVal.map(j => {
        return v[j]
      }))
    },
    getSortClass: function(key) {
      const sort = this.listQuery.sort
      return sort === `+${key}` ? 'ascending' : 'descending'
    },
    // 上传文件
    handleRemove(file, fileList) {
      this.fileList = []
    },
    RemoveFileList() { // 解决第二次打开编辑按钮 列表有上次的内容导致 页面出现闪烁
      this.fileList = []
    },
    fileChange(file, fileList) {
      this.fileList.push(file.raw)
      console.log(this.fileList)
    }
  }
}
</script>
<style scoped>
  .flex-box {
    display: flex;
    justify-content: space-between;
  }
</style>
